# -*- coding: utf-8 -*-
"""data generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/ianobraczka/1ea304a03eac636b0cc8dd6f389e908c/data-generator.ipynb

# Creating methods and structures

Install libraries
"""

!pip install faker
!pip install IMDbPY
import pandas as pd, numpy as np
import random,requests
from bs4 import BeautifulSoup
from faker import Faker
import random

#initialize Faker
fake=Faker()

"""Method to generate n **float** numbers from a to b"""

def random_floats(n, a, b):
  array = []
  for i in range(n):
    array.append(round(random.uniform(a,b), 3))
  return array

"""Method to generate n **integer** numbers from a to b"""

def random_ints(n, a, b):
  array = []
  for i in range(n):
    array.append(random.randint(a,b))
  return array

"""Method to generate n **values from array**"""

def random_values(n, values):
  array = []
  for i in range(n):
    array.append(random.choice(values))
  return array

"""Method to generate n values from **array of options and another array of probabilities**"""

def random_values_with_probs(n, values, p=None):
  if not p:
      # default probabilities
      p = (0.49, 0.49, 0.01, 0.01)
  return np.random.choice(values, size=n, p=p)

#sample input
#print(random_values_with_probs(100, ["a", "b", "c"], [0.4, 0.5, 0.1]))

"""Method to generate n **names**"""

def random_names(n):
  array = []
  for i in range(n):
    array.append(fake.name())
  return array
#print(random_names(10))

"""**Example input** for creating new dataframe using all of the above"""

# number of rows
size = 500

# new dataframe with column names
df = pd.DataFrame(columns=['A', 'B', 'C', 'D'])

# using functions to generate wanted values
df['A'] = random_floats(size, 1.4, 5.4)
df['B'] = random_ints(size, 10, 90) 
df['C'] = random_values(size, ["bom", "otimo", "excelente"])
df['D'] = random_values_with_probs(size, ["bom", "otimo", "excelente"], [0.7, 0.2, 0.1])

#print(df.head())
#df.to_csv('dataframe.csv')

def generate_n(n, value):
  array = []
  for i in range(n):
    array.append(value)
  return array

"""# Generating real dataframes for P3

Generate example dataframe (**FIFA**)
"""

size = 600

df_fifa = pd.DataFrame(columns=['posicao', 'velocidade_media', 'gols', 'passes', 'faltas', 'cartoes', 'substituido'])
df_fifa2 = pd.DataFrame(columns=['posicao', 'velocidade_media', 'gols', 'passes', 'faltas', 'cartoes', 'substituido'])
df_fifa3 = pd.DataFrame(columns=['posicao', 'velocidade_media', 'gols', 'passes', 'faltas', 'cartoes', 'substituido'])

df_fifa['posicao'] = generate_n(200, "Zagueiro")
df_fifa['velocidade_media'] = random_ints(200, 6, 8)
df_fifa['gols'] = random_values_with_probs(200, [0,1,2], [.75, .20, .05])
df_fifa['passes'] = random_ints(200, 10, 50)
df_fifa['faltas'] = random_ints(200, 1, 15)
df_fifa['cartoes'] = random_values_with_probs(200, ["Nenhum", "Amarelo", "Vermelho"], [.40, .50, .10])
df_fifa['substituido'] = random_values_with_probs(200, ["Sim", "Não"], [.30, .70])

df_fifa2['posicao'] = generate_n(200, "Meio Campo")
df_fifa2['velocidade_media'] = random_ints(200, 7, 10)
df_fifa2['gols'] = random_values_with_probs(200, [0,1,2,3], [.65, .28, .05, .02])
df_fifa2['passes'] = random_ints(200, 15, 70)
df_fifa2['faltas'] = random_ints(200, 0, 10)
df_fifa2['cartoes'] = random_values_with_probs(200, ["Nenhum", "Amarelo", "Vermelho"], [.60, .30, .10])
df_fifa2['substituido'] = random_values_with_probs(200, ["Sim", "Não"], [.40, .60])

df_fifa3['posicao'] = generate_n(200, "Atacante")
df_fifa3['velocidade_media'] = random_ints(200, 8, 11)
df_fifa3['gols'] = random_values_with_probs(200, [0,1,2,3], [.25, .60, .10, .05])
df_fifa3['passes'] = random_ints(200, 10, 60)
df_fifa3['faltas'] = random_ints(200, 3, 12)
df_fifa3['cartoes'] = random_values_with_probs(200, ["Nenhum", "Amarelo", "Vermelho"], [.40, .40, .20])
df_fifa3['substituido'] = random_values_with_probs(200, ["Sim", "Não"], [.50, .50])

df_fifa = df_fifa.append(df_fifa2, ignore_index=True)
df_fifa = df_fifa.append(df_fifa3, ignore_index=True)
print(df_fifa)
df_fifa.to_csv('fifa.csv')

"""**Download files**"""

from google.colab import files
files.download('fifa.csv')